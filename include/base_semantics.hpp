#pragma once

#include "semantic.hpp"

namespace amanita {
void semantic_space(State *, InstructionPointer *, std::vector<Action> &);
void semantic_logical_not(State *, InstructionPointer *, std::vector<Action> &);
void semantic_toggle_stringmode(State *, InstructionPointer *, std::vector<Action> &);
void semantic_trampoline(State *, InstructionPointer *, std::vector<Action> &);
void semantic_pop(State *, InstructionPointer *, std::vector<Action> &);
void semantic_remainder(State *, InstructionPointer *, std::vector<Action> &);
void semantic_input_integer(State *, InstructionPointer *, std::vector<Action> &);
void semantic_fetch_character(State *, InstructionPointer *, std::vector<Action> &);
void semantic_load_semantics(State *, InstructionPointer *, std::vector<Action> &);
void semantic_unload_semantics(State *, InstructionPointer *, std::vector<Action> &);
void semantic_multiply(State *, InstructionPointer *, std::vector<Action> &);
void semantic_add(State *, InstructionPointer *, std::vector<Action> &);
void semantic_output_character(State *, InstructionPointer *, std::vector<Action> &);
void semantic_subtract(State *, InstructionPointer *, std::vector<Action> &);
void semantic_output_integer(State *, InstructionPointer *, std::vector<Action> &);
void semantic_divide(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_zero(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_one(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_two(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_three(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_four(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_five(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_six(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_seven(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_eight(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_niner(State *, InstructionPointer *, std::vector<Action> &);
void semantic_duplicate(State *, InstructionPointer *, std::vector<Action> &);
void semantic_jump_over(State *, InstructionPointer *, std::vector<Action> &);
void semantic_go_west(State *, InstructionPointer *, std::vector<Action> &);
void semantic_execute(State *, InstructionPointer *, std::vector<Action> &);
void semantic_go_east(State *, InstructionPointer *, std::vector<Action> &);
void semantic_go_away(State *, InstructionPointer *, std::vector<Action> &);
void semantic_stop(State *, InstructionPointer *, std::vector<Action> &);
void semantic_turn_left(State *, InstructionPointer *, std::vector<Action> &);
void semantic_swap(State *, InstructionPointer *, std::vector<Action> &);
void semantic_turn_right(State *, InstructionPointer *, std::vector<Action> &);
void semantic_go_north(State *, InstructionPointer *, std::vector<Action> &);
void semantic_east_west_if(State *, InstructionPointer *, std::vector<Action> &);
void semantic_greater_than(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_ten(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_eleven(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_twelve(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_thirteen(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_fourteen(State *, InstructionPointer *, std::vector<Action> &);
void semantic_push_fifteen(State *, InstructionPointer *, std::vector<Action> &);
void semantic_get(State *, InstructionPointer *, std::vector<Action> &);
void semantic_go_high(State *, InstructionPointer *, std::vector<Action> &);
void semantic_input_file(State *, InstructionPointer *, std::vector<Action> &);
void semantic_jump_forward(State *, InstructionPointer *, std::vector<Action> &);
void semantic_iterate(State *, InstructionPointer *, std::vector<Action> &);
void semantic_go_low(State *, InstructionPointer *, std::vector<Action> &);
void semantic_high_low_if(State *, InstructionPointer *, std::vector<Action> &);
void semantic_clear_stack(State *, InstructionPointer *, std::vector<Action> &);
void semantic_output_file(State *, InstructionPointer *, std::vector<Action> &);
void semantic_put(State *, InstructionPointer *, std::vector<Action> &);
void semantic_quit(State *, InstructionPointer *, std::vector<Action> &);
void semantic_reflect(State *, InstructionPointer *, std::vector<Action> &);
void semantic_store_character(State *, InstructionPointer *, std::vector<Action> &);
void semantic_split(State *, InstructionPointer *, std::vector<Action> &);
void semantic_stack_under_stack(State *, InstructionPointer *, std::vector<Action> &);
void semantic_go_south(State *, InstructionPointer *, std::vector<Action> &);
void semantic_compare(State *, InstructionPointer *, std::vector<Action> &);
void semantic_absolute_delta(State *, InstructionPointer *, std::vector<Action> &);
void semantic_get_sysinfo(State *, InstructionPointer *, std::vector<Action> &);
void semantic_no_operation(State *, InstructionPointer *, std::vector<Action> &);
void semantic_begin_block(State *, InstructionPointer *, std::vector<Action> &);
void semantic_north_south_if(State *, InstructionPointer *, std::vector<Action> &);
void semantic_end_block(State *, InstructionPointer *, std::vector<Action> &);
void semantic_input_character(State *, InstructionPointer *, std::vector<Action> &);
} // namespace amanita
